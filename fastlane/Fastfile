    # This file contains the fastlane.tools configuration
    # You can find the documentation at https://docs.fastlane.tools
    #
    # For a list of all available actions, check out
    #
    #     https://docs.fastlane.tools/actions
    #
    # For a list of all available plugins, check out
    #
    #     https://docs.fastlane.tools/plugins/available-plugins
    #
    # From
    #
    #     https://www.runway.team/blog/how-to-set-up-a-ci-cd-pipeline-for-your-ios-app-fastlane-github-actions
    #

    before_all do
     update_fastlane
     require 'spaceship'
     Spaceship::ConnectAPI::App.const_set('ESSENTIAL_INCLUDES', 'appStoreVersions')
    end


    platform :android do
      desc "Deploy a new version to the Google Play"
      lane :deploy do
        upload_to_play_store(
          json_key: ENV["ANDROID_JSON_KEY_FILE"],
          track: "internal",
          aab: ENV["AAB_PATH"],
          release_status: "draft",
          skip_upload_apk: true,
          skip_upload_metadata: true,
          skip_upload_changelogs: true,
          skip_upload_images: true,
          skip_upload_screenshots: true
        )
      end
    end


    platform :ios do
      desc "Load ASC API Key information to use in subsequent lanes"
      lane :load_asc_api_key do
        app_store_connect_api_key(
          key_id: ENV["ASC_KEY_ID"],
          issuer_id: ENV["ASC_ISSUER_ID"],
          key_content: ENV["ASC_KEY"],
          is_key_content_base64: true,
          in_house: false # detecting this via ASC private key not currently supported
        )
      end
      
      desc "Bump build number based on most recent TestFlight build number"
      lane :fetch_and_increment_build_number do
        #fetch read your app identifier defined in your Appfile
        app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
        api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
        current_version = get_version_number(target: "WordClock")
        latest_build_number = latest_testflight_build_number(
          api_key: api_key,
          version: current_version,
          app_identifier: app_identifier
        )
        increment_build_number(build_number: (latest_build_number + 1))
      end
     
      desc "Installs signing certificate in the keychain and downloads provisioning profiles from App Store Connect"
      lane :prepare_signing do |options|
        team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
        api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
        keychain_name = "signing"
        keychain_password = "temp"
        delete_keychain(name: keychain_name) if File.exist? File.expand_path("~/Library/Keychains/#{keychain_name}-db")
        create_keychain(
          name: keychain_name,
          password: keychain_password,
          default_keychain: true,
          unlock: true,
          timeout: 3600
        )
        import_certificate(
          certificate_path: ENV["SIGNING_KEY_FILE_PATH"],
          certificate_password: ENV["SIGNING_KEY_PASSWORD"],
          keychain_name: keychain_name,
          keychain_password: keychain_password
        )
        # fetches and installs provisioning profiles from ASC
        sigh(adhoc: options[:adhoc], api_key: api_key)
      end

     desc "Build the iOS app for release"
     lane :build_release do |options|
     app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
     profile_name = "App Provisioning Profile"
     output_name = "wordclock"
     export_method = "app-store"
     # turn off automatic signing during build so correct code signing identity is guaranteed to be used
     update_code_signing_settings(
       use_automatic_signing: false,
       targets: ["WordClock"],
       code_sign_identity: "Apple Distribution",
       bundle_identifier: app_identifier,
       profile_name: profile_name,
       build_configurations: ["Release"]
     )
     # build the app
     gym(
       scheme: "WordClock",
       output_name: output_name,
       configuration: "Release",
       export_options: {
         method: export_method,
         provisioningProfiles: {
           app_identifier => profile_name
         }
       }
     )
     end
     desc "Upload to TestFlight / ASC"
     lane :upload_testflight do
     api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
     deliver(
      api_key: api_key,
      automatic_release: false,
      force: true, # Skip HTMl report verification
      run_precheck_before_submit: false,
      skip_app_version_update: true,
      skip_binary_upload: false,
      skip_metadata: true,
      skip_screenshots: true,
      submit_for_review: false
     )
     end
     desc "Build and upload to TestFlight"
     lane :deploy do
      load_asc_api_key
      prepare_signing
      fetch_and_increment_build_number
      build_release
      upload_testflight
     end
    end